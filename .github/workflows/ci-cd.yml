name: OCCS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: occs-frontend
  IMAGE_NAME_BACKEND: occs-backend
  IMAGE_NAME_AI: occs-ai-service

jobs:
  # Job 1: Run Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend, ai-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java 17 (for backend)
      if: matrix.service == 'backend'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Node.js (for frontend)
      if: matrix.service == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python (for AI service)
      if: matrix.service == 'ai-service'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Backend Tests
    - name: Run Backend Tests
      if: matrix.service == 'backend'
      run: |
        cd onlineCodingCompetition
        ./mvnw clean test
        ./mvnw jacoco:report

    - name: Upload Backend Coverage
      if: matrix.service == 'backend'
      uses: codecov/codecov-action@v3
      with:
        file: onlineCodingCompetition/target/site/jacoco/jacoco.xml
        flags: backend

    # Frontend Tests
    - name: Install Frontend Dependencies
      if: matrix.service == 'frontend'
      run: |
        cd frontend
        npm ci

    - name: Run Frontend Tests
      if: matrix.service == 'frontend'
      run: |
        cd frontend
        npm run test:ci
        npm run build

    - name: Run Frontend Linting
      if: matrix.service == 'frontend'
      run: |
        cd frontend
        npm run lint

    # AI Service Tests
    - name: Install AI Service Dependencies
      if: matrix.service == 'ai-service'
      run: |
        cd RecommendationSystem
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run AI Service Tests
      if: matrix.service == 'ai-service'
      run: |
        cd RecommendationSystem
        pytest --cov=app --cov-report=xml

    - name: Upload AI Coverage
      if: matrix.service == 'ai-service'
      uses: codecov/codecov-action@v3
      with:
        file: RecommendationSystem/coverage.xml
        flags: ai-service

  # Job 2: Security Scan
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Build and Push Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build Frontend
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build Backend
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./onlineCodingCompetition
        file: ./onlineCodingCompetition/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build AI Service
    - name: Build and push AI Service image
      uses: docker/build-push-action@v5
      with:
        context: ./RecommendationSystem
        file: ./RecommendationSystem/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_AI }}:latest
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_AI }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build Code Execution Environment Images
    - name: Build and push Python Runner image
      uses: docker/build-push-action@v5
      with:
        context: ./onlineCodingCompetition/src/main/resources/docker/python
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/occs-python-runner:latest

    - name: Build and push Java Runner image
      uses: docker/build-push-action@v5
      with:
        context: ./onlineCodingCompetition/src/main/resources/docker/java
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/occs-java-runner:latest

    - name: Build and push C++ Runner image
      uses: docker/build-push-action@v5
      with:
        context: ./onlineCodingCompetition/src/main/resources/docker/cpp
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/occs-cpp-runner:latest

    - name: Build and push JS Runner image
      uses: docker/build-push-action@v5
      with:
        context: ./onlineCodingCompetition/src/main/resources/docker/js
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/occs-js-runner:latest

  # Job 4: Deploy to Azure VM
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az --version

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AZURE_VM_HOST }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        script: |
          # Create deployment directory
          mkdir -p ~/occs-deployment
          cd ~/occs-deployment
          
          # Create environment file
          cat > .env.production << EOF
          GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ACCESS_KEY=${{ secrets.ACCESS_KEY }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          TRAN_API_KEY=${{ secrets.TRAN_API_KEY }}
          VITE_API_BASE_URL=http://${{ secrets.AZURE_VM_HOST }}:8080/api
          VITE_RECOMMENDATION_API_URL=http://${{ secrets.AZURE_VM_HOST }}:3000
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          EOF
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_AI }}:latest
          
          # Stop existing containers
          docker-compose -f docker-compose.prod.yml down || true
          
          # Start new containers
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f

    - name: Copy deployment files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AZURE_VM_HOST }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        source: "deploy/docker-compose.prod.yml,deploy/occsbackup/backup.sql"
        target: "~/occs-deployment/"
        strip_components: 1

    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ secrets.AZURE_VM_HOST }}/health || exit 1
        curl -f http://${{ secrets.AZURE_VM_HOST }}:8080/actuator/health || exit 1
        curl -f http://${{ secrets.AZURE_VM_HOST }}:3000/ || exit 1

  # Job 5: Notify
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🎉 OCCS deployment successful! Application is live at http://${{ secrets.AZURE_VM_HOST }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ OCCS deployment failed! Please check the logs."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}